#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Faraday Penetration Test IDE
Copyright (C) 2013  Infobyte LLC (http://www.infobytesec.com/)
See the file 'doc/LICENSE' for the license information

'''
from __future__ import with_statement
import re
import os

from plugins import core
from model import api
try:
    import xml.etree.cElementTree as ET
    import xml.etree.ElementTree as ET_ORIG
    ETREE_VERSION = ET_ORIG.VERSION
except ImportError:
    import xml.etree.ElementTree as ET
    ETREE_VERSION = ET.VERSION

ETREE_VERSION = [int(i) for i in ETREE_VERSION.split(".")]

current_path = os.path.abspath(os.getcwd())

__author__ = "Francisco Amato"
__copyright__ = "Copyright (c) 2013, Infobyte LLC"
__credits__ = ["Francisco Amato"]
__license__ = ""
__version__ = "1.0.0"
__maintainer__ = "Francisco Amato"
__email__ = "famato@infobytesec.com"
__status__ = "Development"


class NexposeXmlParser(object):
    """
    The objective of this class is to parse an xml file generated by the nexpose tool.

    TODO: Handle errors.
    TODO: Test nexpose output version. Handle what happens if the parser doesn't support it.
    TODO: Test cases.

    @param nexpose_xml_filepath A proper xml generated by nexpose
    """

    def __init__(self, xml_output):
        tree = self.parse_xml(xml_output)
        if tree:
            vulns = self.get_vulns_list(tree)
            self.items = [data for data in self.get_items(tree, vulns)]

        else:
            self.items = []

    def parse_xml(self, xml_output):
        """
        Open and parse an xml file.

        TODO: Write custom parser to just read the nodes that we need instead of
        reading the whole file.

        @return xml_tree An xml tree instance. None if error.
        """
        try:
            tree = ET.fromstring(xml_output)
        except SyntaxError, err:
            print "SyntaxError: %s. %s" % (err, xml_output)
            return None

        return tree

    def get_items(self, tree, vulnerabilities):
        """
        @return items A list of Host instances
        """
        for node in tree.findall("nodes/node"):
            yield Item(node, vulnerabilities)

    def get_vulns_list(self, tree):
        """
        :param tree:
        """
        vulns_list = []
        for self.issues in tree.findall("VulnerabilityDefinitions/vulnerability"):
            vulns_list.append(self.issues)

        return vulns_list


class Item(object):
    """
    An abstract representation of a Item


    @param item_node A item_node taken from an nexpose xml tree
    """

    def __init__(self, item_node, vulnerability):
        self.node = item_node
        self.ip = item_node.get('address')
        self.os = self.get_version('fingerprints/os')
        # Checking node's vulns
        node_tests_list = self.get_tests('tests')
        self.vulns_list = vulnerability
        self.node_vulns = self.check_vulns(node_tests_list, self.vulns_list)
        # Checking service's vulns
        self.service = self.get_service('endpoints/endpoint', item_node)


    def get_service(self, path, item_node):
        """
        Gets a service.

        @return service
        """
        self.srv = []
        for srv in item_node.findall(path):
            self.node = srv
            item = {}
            tests_list = self.get_tests('services/service/tests')
            item['name'] = self.get_name_from_service('services/service')
            item['port'] = srv.get('port')
            item['protocol'] = srv.get('protocol')
            item['status'] = srv.get('status')
            item['version'] = self.get_version('services/service/fingerprints/fingerprint')
            item['vulns'] = self.check_vulns(tests_list, self.vulns_list)
            self.srv.append(item)

        return self.srv


    def get_name_from_service(self, service_path):
        """
        Gets the name of a service.

        @return service's attribute 'name'
        """
        sub_node = self.node.find(service_path)
        if sub_node is not None:
            return sub_node.get('name')

        return None

    def get_version(self, path):
        """
        Gets version of a host or a service.

        @return attribute 'product' from a host or a service
        """
        sub_node = self.node.find(path)
        if sub_node is not None:
            return sub_node.attrib['product']

        return None

    def get_tests(self, test_path):
        """
        Gets every test in a service.

        @return a list of every test
        """
        sub_node = self.node.find(test_path)
        tests_list = []
        for test in sub_node:
            tests_list.append(test)
        return tests_list

    #Check which test of a node or service is a vuln
    def check_vulns(self, list_of_tests, list_of_vulns):
        """
        Checks if a test of a host or a service is in the vulns list

        @return a list of vulns of a host or a service
        """
        checked_vulns = []
        vuln_attributes = {}
        for test in list_of_tests:
            for vuln in list_of_vulns:
                if test.attrib['id'] == vuln.attrib['id']:
                    vuln_attributes['id'] = vuln.attrib['id']
                    vuln_attributes['ref'] = self.get_vulns_ref(vuln)
                    vuln_attributes['severity'] = self.severity_format(vuln.attrib['severity'])
                    vuln_attributes['description'] = self.convert_to_flat_text(vuln, 'description')
                    vuln_attributes['resolution'] = self.convert_to_flat_text(vuln, 'solution')
                    checked_vulns.append(vuln_attributes)

        return checked_vulns

    def severity_format(self, severity):
        """
        Convert Nexpose severity format into Faraday API severity format

        @return a severity
        """
        if severity == '1' or severity == '2':
            return 'low'
        elif severity == '3' or severity == '4':
            return 'medium'
        elif severity >= '5' or severity <= '7':
            return 'high'
        elif severity >= '8':
            return 'critical'

    def get_vulns_ref(self, vuln):
        """
        Gets the references of a vuln

        @return a list of sources of every reference
        """
        # PCISeverity: Policy violations can't be added to plugins
        source = []
        source.append("cvssScore-" + vuln.attrib['cvssScore'])
        source.append("cvssVector-" + vuln.attrib['cvssVector'])

        data = self.get_text_from_reference(vuln, "references/reference/[@source='CVE']")
        if data:
            source.append(data)

        data = self.get_text_from_reference(vuln, "references/reference/[@source='BID']")
        if data:
            source.append("bid-" + data)

        data = self.get_text_from_reference(vuln, "references/reference/[@source='OVAL']")
        if data:
            source.append("osvdb-" + data)

        data = self.get_text_from_reference(vuln, "references/reference/[@source='SUSE']")
        if data:
            source.append("suse-" + data)

        for sources in vuln.findall("references/reference/[@source='XF']"):
            source.append("xf-" + sources.text)

        for sources in vuln.findall("references/reference/[@source='REDHAT']"):
            source.append("secunia-" + sources.text)

        for sources in vuln.findall("references/reference/[@source='URL']"):
            source.append("url-" + sources.text)

        return source

    def get_text_from_reference(self, vulnerability, reference_path):
        """
        Gets text from the references of a vulnerability.

        @return A attribute value
        """
        sub_node = vulnerability.find(reference_path)
        if sub_node is not None:
            return sub_node.text

        return None

    def convert_to_flat_text(self, vuln, tag):
        """
        Converts texts from multiples elements into one flat text

        @return returns new text
        """
        self.description = vuln.find(tag)
        xml_str = self.description.itertext()
        aux_string  = []
        strings_list = [data for data in xml_str]
        # Iterating each item of the list that contains the strings
        for item in strings_list:
            # Taking away '\n', '\t'
            aux_item = item.rstrip()
            if aux_item is not '':
                string_text = aux_item.replace('\n','')
                aux_string.append(string_text)

        flatten_text = ' '.join(aux_string)
        flat_text = ' '.join(flatten_text.split())

        return flat_text


class NexposePlugin(core.PluginBase):
    """
    Example plugin to parse nexpose output.
    """

    def __init__(self):
        core.PluginBase.__init__(self)
        self.id = "Nexpose"
        self.name = "Nexpose XML Output Plugin"
        self.plugin_version = "0.0.1"
        self.version = "Nexpose Enterprise 5.7.19"
        self.framework_version = "1.0.0"
        self.options = None
        self._current_output = None
        self._command_regex = re.compile(r'^(sudo nexpose|\.\/nexpose).*?')

        global current_path
        self._output_file_path = os.path.join(self.data_path,
                                              "nexpose_output-%s.xml" % self._rid)

    def parseOutputString(self, output, debug=False):
        parser = NexposeXmlParser(output)
        for item in parser.items:
            host_id = self.createAndAddHost(item.ip, item.os)

            for vuln in item.node_vulns:
                vuln_id = self.createAndAddVulnToHost(
                    host_id, vuln['id'],
                    ref=vuln['ref'],
                    severity=vuln['severity'],
                    desc=vuln['description'],
                    resolution=vuln['resolution']
                )

            for srv in item.service:
                service_id = self.createAndAddServiceToHost(host_id, srv['name'],
                                                           srv['protocol'],
                                                           ports=[
                                                               str(srv['port'])],
                                                           status=srv['status'],
                                                           version=srv['version'])
                for vuln in srv['vulns']:
                    vuln_id = self.createAndAddVulnToService(
                            host_id,
                            service_id,
                            vuln['id'],
                            ref=vuln['ref'],
                            severity=vuln['severity'],
                            desc=vuln['description'],
                            resolution=vuln['resolution']
                    )
        del parser

    def processCommandString(self, username, current_path, command_string):
        return None

    def setHost(self):
        pass


def createPlugin():
    return NexposePlugin()

if __name__ == '__main__':
    parser = NexposePlugin()
    with open('/home/javier/report-xml1.0.xml', 'r') as report:
        parser.parseOutputString(report.read())
        for item in parser.items:
            if item.status == 'up':
                print item
